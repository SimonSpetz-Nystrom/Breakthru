<Window x:Class="BreakthruGame.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:c="clr-namespace:BreakthruGame"   
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        Title="Breakthru" Height="600" Width="700" MinHeight="600" MinWidth="700" Loaded="Window_Loaded" Icon="Resources/GoldFlagship.png" Background="GhostWhite" Closed="Window_Closed" >
    <Window.Resources>
        <!--Square size defined twice because the grid requires a special type.-->
        <!--The alternatvie would be to use a converter, but this was chosen for simplicity.-->
        <!--The two values below shall be the same-->
        <sys:Double x:Key="SquareSize" >45</sys:Double>
        <GridLength x:Key="SquareSizeForGrid" >45</GridLength>

        <!--Reaources used for animations-->
        <c:PosToTranslationConverter x:Key="PosToTranslationConverter" />
        <PowerEase x:Key="MovementEase" EasingMode="EaseOut" Power="2" />
        <DoubleAnimation x:Key="xAnimation" Duration="0:0:0.5" Storyboard.TargetProperty="(Image.RenderTransform).(TranslateTransform.X)" EasingFunction="{StaticResource MovementEase}" />
        <DoubleAnimation x:Key="yAnimation" Duration="0:0:0.5" Storyboard.TargetProperty="(Image.RenderTransform).(TranslateTransform.Y)" EasingFunction="{StaticResource MovementEase}" />

        <Storyboard x:Key="FadeInOutAnim" Storyboard.TargetName="IllegalMoveMarker">
            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5" AutoReverse="True" />
        </Storyboard>

        <!--Style for images, to be used for pieces. -->
        <!--This style definition acts under the assumption that the data context of the image is a BreakthruGamePiece. -->
        <Style TargetType="Image">

            <!--Property setters-->
            <Setter Property="Width" Value="{StaticResource SquareSize}" />
            <Setter Property="Height" Value="{StaticResource SquareSize}" />
            <Setter Property="Grid.Column" Value="0" />
            <Setter Property="Grid.Row" Value="0" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="RenderTransform" >
                <Setter.Value >
                    <MultiBinding Converter="{StaticResource PosToTranslationConverter}" NotifyOnTargetUpdated="True">
                        <Binding Path="Position" />
                        <Binding Source="{StaticResource SquareSize}" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>

            <!--Event setters-->
            <EventSetter Event="MouseLeftButtonUp" Handler="ImageClick" />
            <EventSetter Event="Binding.TargetUpdated" Handler="PiecePositionUpdated" />

            <!--Selection of image source based on piece type-->
            <Style.Triggers>
                <DataTrigger Binding="{Binding TypeOfPiece}" Value="GoldEscort" >
                    <Setter Property="Source" Value="Resources/GoldPiece.png" />
                </DataTrigger>
                <DataTrigger Binding="{Binding TypeOfPiece}" Value="GoldFlagship" >
                    <Setter Property="Source" Value="Resources/GoldFlagship.png" />
                </DataTrigger>
                <DataTrigger Binding="{Binding TypeOfPiece}" Value="SilverShip" >
                    <Setter Property="Source" Value="Resources/SilverPiece.png" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--Style for column definitions, defining the width-->
        <Style TargetType="ColumnDefinition">
            <Setter Property="Width" Value="{StaticResource SquareSizeForGrid}" />
        </Style>

        <!--Stylöe for row definitions, defining the height-->
        <Style TargetType="RowDefinition">
            <Setter Property="Height" Value="{StaticResource SquareSizeForGrid}" />
        </Style>

        <!--Style for text blocks that display a player role-->
        <Style x:Key="RoleStyle">
            <Setter Property="TextBlock.FontSize" Value="22" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="Gold" >
                    <Setter Property="TextBlock.Foreground" Value="#FFC3A502" />
                </DataTrigger>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="Silver" >
                    <Setter Property="TextBlock.Foreground" Value="#FFA6A6A6" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="GameplayStyle">
            <Setter Property="TextBlock.Text" Value="Winner: " />
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=WinnerBlock, Path=Text}" Value="">
                    <Setter Property="TextBlock.Text" Value="Player to move: " />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--Style for illegal marker. Collapses the image when opacity is at zero.-->
        <Style x:Key="IllegalMarker" >
            <Setter Property="Image.Visibility" Value="Visible" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Opacity}" Value="0" >
                    <Setter Property="Image.Visibility" Value="Collapsed" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>
    <DockPanel>
        <!--Menu to be used in future versions-->
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="New Game" Click="NewGameClick"/>
        </Menu>

        <!--Text block informing which player shall perform a move-->
        <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" HorizontalAlignment="Center" >
            <TextBlock FontSize="22" Style="{StaticResource GameplayStyle}"/>
            <TextBlock Text="{Binding CurrentRole}" DockPanel.Dock="Top"  Style="{StaticResource RoleStyle}"/>
            <TextBlock x:Name="WinnerBlock" Text="{Binding Winner.Item2, NotifyOnTargetUpdated=True}" TargetUpdated="WinnerBlockTextUpdated" Style="{StaticResource RoleStyle}"/>
        </StackPanel>

        <!--Game board-->
        <Grid Name="GameBoard" Background="Gray" MouseLeftButtonUp="GameBoard_MouseLeftButtonUp" ShowGridLines="True" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <!--Rectangle used to show the area where gold ships start-->
            <Rectangle Grid.Column="3" Grid.Row="3" Grid.ColumnSpan="5" Grid.RowSpan="5" Fill="Black" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>

            <!--This image is moved around and fades in/out to show where illegal move attempts are made-->
            <Image x:Name="IllegalMoveMarker" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0" Source="Resources/IllegalMove.png" Style="{StaticResource IllegalMarker}" Panel.ZIndex="1" />

        </Grid>
    </DockPanel>
</Window>
